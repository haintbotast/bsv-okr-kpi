version: '3.8'

# =============================================================================
# PRODUCTION DOCKER COMPOSE CONFIGURATION
# =============================================================================
#
# This is the production-optimized configuration with:
# - Resource limits
# - Security hardening
# - Performance tuning
# - SSL/HTTPS support
# - Health checks
# - Restart policies
# - Logging configuration
#
# Usage: docker-compose -f docker-compose.prod.yml up -d
# =============================================================================

services:
  # ===========================================================================
  # Backend API Service
  # ===========================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
    container_name: kpi-backend-prod

    # Port mapping (internal only - accessed through frontend proxy)
    ports:
      - "127.0.0.1:8000:8000"
      # Bind to localhost only for security

    # Volume mounts
    volumes:
      # Persistent data
      - ./data/database:/data/database
      - ./data/uploads:/data/uploads
      - ./data/backups:/data/backups
      - ./data/logs:/data/logs
      # DO NOT mount source code in production

    # Environment variables (loaded from .env file)
    environment:
      # Application
      - APP_NAME=${APP_NAME:-KPI Management System}
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - ENVIRONMENT=production

      # Database
      - DATABASE_URL=sqlite:////data/database/kpi.db

      # Security
      - SECRET_KEY=${SECRET_KEY}
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-480}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}

      # File Storage
      - UPLOAD_DIR=/data/uploads
      - MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE:-52428800}
      - ALLOWED_EXTENSIONS=${ALLOWED_EXTENSIONS:-pdf,doc,docx,xls,xlsx,ppt,pptx,jpg,jpeg,png,gif}

      # Backup
      - BACKUP_DIR=/data/backups
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - AUTO_BACKUP_ENABLED=${AUTO_BACKUP_ENABLED:-true}

      # CORS
      - CORS_ORIGINS=${CORS_ORIGINS}

      # Email
      - SMTP_ENABLED=${SMTP_ENABLED:-false}
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SMTP_FROM=${SMTP_FROM:-noreply@company.com}

      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FILE=/data/logs/app.log

      # Performance
      - WORKERS=${WORKERS:-2}
      - TIMEOUT=${TIMEOUT:-60}
      - KEEP_ALIVE=${KEEP_ALIVE:-5}

      # Features
      - ENABLE_DOCS=${ENABLE_DOCS:-false}
      # Disable API docs in production for security
      - DEBUG=false
      - RELOAD=false

    # Environment file
    env_file:
      - .env

    # Restart policy
    restart: unless-stopped

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
        reservations:
          cpus: '0.5'
          memory: 512M

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    # Security options
    security_opt:
      - no-new-privileges:true

    # Read-only root filesystem (except mounted volumes)
    # read_only: true
    # tmpfs:
    #   - /tmp
    #   - /run

    # User (run as non-root)
    # user: "1000:1000"

    networks:
      - kpi-network

  # ===========================================================================
  # Frontend Web Service
  # ===========================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
    container_name: kpi-frontend-prod

    # Port mapping
    ports:
      - "80:80"
      - "443:443"
      # HTTPS port for SSL/TLS

    # Volume mounts
    volumes:
      # Mount uploads directory for Nginx to serve files
      - ./data/uploads:/data/uploads:ro
      # Read-only for security

      # SSL certificates (after Let's Encrypt setup)
      - ./certs:/etc/nginx/certs:ro
      # If using certbot, mount: /etc/letsencrypt:/etc/letsencrypt:ro

      # Custom Nginx configuration
      - ./nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
      # Optional: override default Nginx config

    # Environment variables
    environment:
      - BACKEND_URL=http://backend:8000
      - ENVIRONMENT=production

    # Depends on backend
    depends_on:
      backend:
        condition: service_healthy

    # Restart policy
    restart: unless-stopped

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    # Security options
    security_opt:
      - no-new-privileges:true

    networks:
      - kpi-network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  database:
    driver: local
  uploads:
    driver: local
  backups:
    driver: local
  logs:
    driver: local

# =============================================================================
# Networks
# =============================================================================
networks:
  kpi-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# PRODUCTION DEPLOYMENT CHECKLIST
# =============================================================================
#
# Before deploying to production:
#
# 1. ENVIRONMENT SETUP:
#    ✓ Copy .env.example to .env
#    ✓ Generate strong SECRET_KEY: openssl rand -hex 32
#    ✓ Update CORS_ORIGINS with your domain
#    ✓ Set strong ADMIN_PASSWORD
#    ✓ Review all .env variables
#
# 2. SSL/HTTPS SETUP:
#    ✓ Obtain SSL certificate (Let's Encrypt recommended)
#    ✓ Place certificates in ./certs/ directory
#    ✓ Update nginx.prod.conf with SSL configuration
#    ✓ Redirect HTTP to HTTPS
#
# 3. SECURITY:
#    ✓ Disable API documentation (ENABLE_DOCS=false)
#    ✓ Configure firewall (allow only ports 80, 443, 22)
#    ✓ Set up fail2ban for SSH protection
#    ✓ Enable automatic security updates
#    ✓ Review file permissions
#
# 4. BACKUP:
#    ✓ Test backup script
#    ✓ Set up automated backups (cron job)
#    ✓ Test restore procedure
#    ✓ Set up off-site backup storage
#
# 5. MONITORING:
#    ✓ Set up uptime monitoring
#    ✓ Configure log rotation
#    ✓ Set up error alerts
#    ✓ Monitor disk space
#    ✓ Monitor resource usage
#
# 6. TESTING:
#    ✓ Run all tests
#    ✓ Test on staging environment
#    ✓ Load testing
#    ✓ Security audit
#    ✓ Penetration testing (optional)
#
# 7. DOCUMENTATION:
#    ✓ Document deployment process
#    ✓ Document backup/restore procedures
#    ✓ Document troubleshooting steps
#    ✓ Prepare rollback plan
#
# =============================================================================
# DEPLOYMENT COMMANDS
# =============================================================================
#
# Initial deployment:
#   docker-compose -f docker-compose.prod.yml up -d --build
#
# Initialize database:
#   docker-compose -f docker-compose.prod.yml exec backend python scripts/init_db.py
#
# Create admin user:
#   docker-compose -f docker-compose.prod.yml exec backend python scripts/create_admin.py \
#     --email admin@company.com --password "SecurePassword123!" --fullname "Admin"
#
# View logs:
#   docker-compose -f docker-compose.prod.yml logs -f
#
# Update application:
#   git pull origin main
#   docker-compose -f docker-compose.prod.yml down
#   docker-compose -f docker-compose.prod.yml up -d --build
#   docker-compose -f docker-compose.prod.yml exec backend alembic upgrade head
#
# Backup database:
#   docker-compose -f docker-compose.prod.yml exec backend python scripts/backup.py
#
# Restart services:
#   docker-compose -f docker-compose.prod.yml restart
#
# Stop services:
#   docker-compose -f docker-compose.prod.yml down
#
# Scale services (if needed):
#   docker-compose -f docker-compose.prod.yml up -d --scale backend=2
#
# =============================================================================
# TROUBLESHOOTING
# =============================================================================
#
# Check service status:
#   docker-compose -f docker-compose.prod.yml ps
#
# Check resource usage:
#   docker stats
#
# Inspect container:
#   docker-compose -f docker-compose.prod.yml exec backend bash
#
# Check logs:
#   docker-compose -f docker-compose.prod.yml logs --tail=100 backend
#
# Restart specific service:
#   docker-compose -f docker-compose.prod.yml restart backend
#
# =============================================================================
