version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kpi-backend
    ports:
      - "8000:8000"
    volumes:
      # Persistent data
      - ./data/database:/data/database
      - ./data/uploads:/data/uploads
      - ./data/backups:/data/backups
      - ./data/logs:/data/logs
      # Development: Mount source code for hot reload (comment out in production)
      # - ./backend/app:/app/app
    environment:
      # Application
      - APP_NAME=KPI Management System
      - APP_VERSION=1.0.0
      - ENVIRONMENT=production
      
      # Database
      - DATABASE_URL=sqlite:////data/database/kpi.db
      
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=480
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      
      # File Storage
      - UPLOAD_DIR=/data/uploads
      - MAX_UPLOAD_SIZE=52428800
      - ALLOWED_EXTENSIONS=pdf,doc,docx,xls,xlsx,ppt,pptx,jpg,jpeg,png,gif
      
      # Backup
      - BACKUP_DIR=/data/backups
      - BACKUP_RETENTION_DAYS=30
      - AUTO_BACKUP_ENABLED=true
      
      # CORS
      - CORS_ORIGINS=${CORS_ORIGINS}
      
      # Email (Optional)
      - SMTP_ENABLED=${SMTP_ENABLED:-false}
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SMTP_FROM=${SMTP_FROM:-noreply@company.com}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FILE=/data/logs/app.log
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    networks:
      - kpi-network

  # Frontend Web Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: kpi-frontend
    ports:
      - "80:80"
      # For HTTPS (after SSL setup)
      # - "443:443"
    volumes:
      # Mount uploads directory for Nginx to serve files
      - ./data/uploads:/data/uploads:ro
      # For SSL certificates (after Let's Encrypt setup)
      # - ./certs:/etc/nginx/certs:ro
    environment:
      - BACKEND_URL=http://backend:8000
    
    depends_on:
      backend:
        condition: service_healthy
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    
    networks:
      - kpi-network

# Named volumes (optional - using bind mounts above is simpler)
volumes:
  database:
  uploads:
  backups:
  logs:

# Network
networks:
  kpi-network:
    driver: bridge

# =============================================================================
# DEPLOYMENT INSTRUCTIONS
# =============================================================================
#
# 1. FIRST TIME SETUP:
#    - Copy .env.example to .env
#    - Update SECRET_KEY in .env (generate with: openssl rand -hex 32)
#    - Update CORS_ORIGINS in .env with your domain
#
# 2. START SERVICES:
#    docker-compose up -d
#
# 3. INITIALIZE DATABASE:
#    docker-compose exec backend python scripts/init_db.py
#
# 4. CREATE ADMIN USER:
#    docker-compose exec backend python scripts/create_admin.py \
#      --email admin@company.com \
#      --password "SecurePassword123!" \
#      --fullname "System Administrator"
#
# 5. ACCESS APPLICATION:
#    http://your-server-ip
#
# 6. VIEW LOGS:
#    docker-compose logs -f
#    docker-compose logs -f backend
#    docker-compose logs -f frontend
#
# 7. STOP SERVICES:
#    docker-compose down
#
# 8. UPDATE APPLICATION:
#    git pull origin main
#    docker-compose down
#    docker-compose up -d --build
#    docker-compose exec backend alembic upgrade head
#
# 9. BACKUP DATABASE:
#    docker-compose exec backend python scripts/backup.py
#    # Or manually:
#    cp data/database/kpi.db data/backups/kpi_$(date +%Y%m%d_%H%M%S).db
#
# 10. RESTORE DATABASE:
#     docker-compose down
#     cp data/backups/kpi_YYYYMMDD_HHMMSS.db data/database/kpi.db
#     docker-compose up -d
#
# =============================================================================
# PRODUCTION OPTIMIZATIONS
# =============================================================================
#
# For production, consider:
# 1. Enable HTTPS with Let's Encrypt
# 2. Set up automated backups (cron job)
# 3. Configure log rotation
# 4. Set resource limits:
#    deploy:
#      resources:
#        limits:
#          cpus: '1'
#          memory: 1G
#        reservations:
#          cpus: '0.5'
#          memory: 512M
# 5. Use external monitoring (Prometheus + Grafana)
#
# =============================================================================
